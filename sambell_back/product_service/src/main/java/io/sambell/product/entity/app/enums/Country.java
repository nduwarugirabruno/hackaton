package io.sambell.product.entity.app.enums;

import lombok.Getter;

@Getter
public enum Country {
    AFGHANISTAN("AF", "Afghanistan", 93),
    ALBANIA("AL", "Albania", 355),
    ALGERIA("DZ", "Algeria", 213),
    ANDORRA("AD", "Andorra", 376),
    ANGOLA("AO", "Angola", 244),
    ARGENTINA("AR", "Argentina", 54),
    ARMENIA("AM", "Armenia", 374),
    AUSTRALIA("AU", "Australia", 61),
    AUSTRIA("AT", "Austria", 43),
    AZERBAIJAN("AZ", "Azerbaijan", 994),
    BAHAMAS("BS", "Bahamas", 1),
    BAHRAIN("BH", "Bahrain", 973),
    BANGLADESH("BD", "Bangladesh", 880),
    BARBADOS("BB", "Barbados", 1),
    BELARUS("BY", "Belarus", 375),
    BELGIUM("BE", "Belgium", 32),
    BELIZE("BZ", "Belize", 501),
    BENIN("BJ", "Benin", 229),
    BHUTAN("BT", "Bhutan", 975),
    BOLIVIA("BO", "Bolivia", 591),
    BOSNIA_AND_HERZEGOVINA("BA", "Bosnia and Herzegovina", 387),
    BOTSWANA("BW", "Botswana", 267),
    BRAZIL("BR", "Brazil", 55),
    BRUNEI("BN", "Brunei", 673),
    BULGARIA("BG", "Bulgaria", 359),
    BURKINA_FASO("BF", "Burkina Faso", 226),
    BURUNDI("BI", "Burundi", 257),
    CAMBODIA("KH", "Cambodia", 855),
    CAMEROON("CM", "Cameroon", 237),
    CANADA("CA", "Canada", 1),
    CAPE_VERDE("CV", "Cape Verde", 238),
    CENTRAL_AFRICAN_REPUBLIC("CF", "Central African Republic", 236),
    CHAD("TD", "Chad", 235),
    CHILE("CL", "Chile", 56),
    CHINA("CN", "China", 86),
    COLOMBIA("CO", "Colombia", 57),
    COMOROS("KM", "Comoros", 269),
    CONGO_BRAZZAVILLE("CG", "Congo - Brazzaville", 242),
    CONGO_KINSHASA("CD", "Congo - Kinshasa", 243),
    COSTA_RICA("CR", "Costa Rica", 506),
    CROATIA("HR", "Croatia", 385),
    CUBA("CU", "Cuba", 53),
    CYPRUS("CY", "Cyprus", 357),
    CZECH_REPUBLIC("CZ", "Czech Republic", 420),
    DENMARK("DK", "Denmark", 45),
    DJIBOUTI("DJ", "Djibouti", 253),
    DOMINICA("DM", "Dominica", 1),
    DOMINICAN_REPUBLIC("DO", "Dominican Republic", 1),
    ECUADOR("EC", "Ecuador", 593),
    EGYPT("EG", "Egypt", 20),
    EL_SALVADOR("SV", "El Salvador", 503),
    EQUATORIAL_GUINEA("GQ", "Equatorial Guinea", 240),
    ERITREA("ER", "Eritrea", 291),
    ESTONIA("EE", "Estonia", 372),
    ESWATINI("SZ", "Eswatini", 268),
    ETHIOPIA("ET", "Ethiopia", 251),
    FIJI("FJ", "Fiji", 679),
    FINLAND("FI", "Finland", 358),
    FRANCE("FR", "France", 33),
    GABON("GA", "Gabon", 241),
    GAMBIA("GM", "Gambia", 220),
    GEORGIA("GE", "Georgia", 995),
    GERMANY("DE", "Germany", 49),
    GHANA("GH", "Ghana", 233),
    GREECE("GR", "Greece", 30),
    GRENADA("GD", "Grenada", 1),
    GUATEMALA("GT", "Guatemala", 502),
    GUINEA("GN", "Guinea", 224),
    GUINEA_BISSAU("GW", "Guinea-Bissau", 245),
    GUYANA("GY", "Guyana", 592),
    HAITI("HT", "Haiti", 509),
    HONDURAS("HN", "Honduras", 504),
    HUNGARY("HU", "Hungary", 36),
    ICELAND("IS", "Iceland", 354),
    INDIA("IN", "India", 91),
    INDONESIA("ID", "Indonesia", 62),
    IRAN("IR", "Iran", 98),
    IRAQ("IQ", "Iraq", 964),
    IRELAND("IE", "Ireland", 353),
    ISRAEL("IL", "Israel", 972),
    ITALY("IT", "Italy", 39),
    IVORY_COAST("CI", "Ivory Coast", 225),
    JAMAICA("JM", "Jamaica", 1),
    JAPAN("JP", "Japan", 81),
    JORDAN("JO", "Jordan", 962),
    KAZAKHSTAN("KZ", "Kazakhstan", 7),
    KENYA("KE", "Kenya", 254),
    KIRIBATI("KI", "Kiribati", 686),
    KOSOVO("XK", "Kosovo", 383),
    KUWAIT("KW", "Kuwait", 965),
    KYRGYZSTAN("KG", "Kyrgyzstan", 996),
    LAOS("LA", "Laos", 856),
    LATVIA("LV", "Latvia", 371),
    LEBANON("LB", "Lebanon", 961),
    LESOTHO("LS", "Lesotho", 266),
    LIBERIA("LR", "Liberia", 231),
    LIBYA("LY", "Libya", 218),
    LIECHTENSTEIN("LI", "Liechtenstein", 423),
    LITHUANIA("LT", "Lithuania", 370),
    LUXEMBOURG("LU", "Luxembourg", 352),
    MADAGASCAR("MG", "Madagascar", 261),
    MALAWI("MW", "Malawi", 265),
    MALAYSIA("MY", "Malaysia", 60),
    MALDIVES("MV", "Maldives", 960),
    MALI("ML", "Mali", 223),
    MALTA("MT", "Malta", 356),
    MARSHALL_ISLANDS("MH", "Marshall Islands", 692),
    MAURITANIA("MR", "Mauritania", 222),
    MAURITIUS("MU", "Mauritius", 230),
    MEXICO("MX", "Mexico", 52),
    MICRONESIA("FM", "Micronesia", 691),
    MOLDOVA("MD", "Moldova", 373),
    MONACO("MC", "Monaco", 377),
    MONGOLIA("MN", "Mongolia", 976),
    MONTENEGRO("ME", "Montenegro", 382),
    MOROCCO("MA", "Morocco", 212),
    MOZAMBIQUE("MZ", "Mozambique", 258),
    MYANMAR("MM", "Myanmar", 95),
    NAMIBIA("NA", "Namibia", 264),
    NAURU("NR", "Nauru", 674),
    NEPAL("NP", "Nepal", 977),
    NETHERLANDS("NL", "Netherlands", 31),
    NEW_ZEALAND("NZ", "New Zealand", 64),
    NICARAGUA("NI", "Nicaragua", 505),
    NIGER("NE", "Niger", 227),
    NIGERIA("NG", "Nigeria", 234),
    NORTH_KOREA("KP", "North Korea", 850),
    NORTH_MACEDONIA("MK", "North Macedonia", 389),
    NORWAY("NO", "Norway", 47),
    OMAN("OM", "Oman", 968),
    PAKISTAN("PK", "Pakistan", 92),
    PALAU("PW", "Palau", 680),
    PALESTINE("PS", "Palestine", 970),
    PANAMA("PA", "Panama", 507),
    PAPUA_NEW_GUINEA("PG", "Papua New Guinea", 675),
    PARAGUAY("PY", "Paraguay", 595),
    PERU("PE", "Peru", 51),
    PHILIPPINES("PH", "Philippines", 63),
    POLAND("PL", "Poland", 48),
    PORTUGAL("PT", "Portugal", 351),
    QATAR("QA", "Qatar", 974),
    ROMANIA("RO", "Romania", 40),
    RUSSIA("RU", "Russia", 7),
    RWANDA("RW", "Rwanda", 250),
    SAINT_KITTS_AND_NEVIS("KN", "Saint Kitts and Nevis", 1),
    SAINT_LUCIA("LC", "Saint Lucia", 1),
    SAINT_VINCENT_AND_THE_GRENADINES("VC", "Saint Vincent and the Grenadines", 1),
    SAMOA("WS", "Samoa", 685),
    SAN_MARINO("SM", "San Marino", 378),
    SAO_TOME_AND_PRINCIPE("ST", "Sao Tome and Principe", 239),
    SAUDI_ARABIA("SA", "Saudi Arabia", 966),
    SENEGAL("SN", "Senegal", 221),
    SERBIA("RS", "Serbia", 381),
    SEYCHELLES("SC", "Seychelles", 248),
    SIERRA_LEONE("SL", "Sierra Leone", 232),
    SINGAPORE("SG", "Singapore", 65),
    SLOVAKIA("SK", "Slovakia", 421),
    SLOVENIA("SI", "Slovenia", 386),
    SOLOMON_ISLANDS("SB", "Solomon Islands", 677),
    SOMALIA("SO", "Somalia", 252),
    SOUTH_AFRICA("ZA", "South Africa", 27),
    SOUTH_KOREA("KR", "South Korea", 82),
    SOUTH_SUDAN("SS", "South Sudan", 211),
    SPAIN("ES", "Spain", 34),
    SRI_LANKA("LK", "Sri Lanka", 94),
    SUDAN("SD", "Sudan", 249),
    SURINAME("SR", "Suriname", 597),
    SWEDEN("SE", "Sweden", 46),
    SWITZERLAND("CH", "Switzerland", 41),
    SYRIA("SY", "Syria", 963),
    TAIWAN("TW", "Taiwan", 886),
    TAJIKISTAN("TJ", "Tajikistan", 992),
    TANZANIA("TZ", "Tanzania", 255),
    THAILAND("TH", "Thailand", 66),
    TIMOR_LESTE("TL", "Timor-Leste", 670),
    TOGO("TG", "Togo", 228),
    TONGA("TO", "Tonga", 676),
    TRINIDAD_AND_TOBAGO("TT", "Trinidad and Tobago", 1),
    TUNISIA("TN", "Tunisia", 216),
    TURKEY("TR", "Turkey", 90),
    TURKMENISTAN("TM", "Turkmenistan", 993),
    TUVALU("TV", "Tuvalu", 688),
    UGANDA("UG", "Uganda", 256),
    UKRAINE("UA", "Ukraine", 380),
    UNITED_ARAB_EMIRATES("AE", "United Arab Emirates", 971),
    UNITED_KINGDOM("GB", "United Kingdom", 44),
    UNITED_STATES("US", "United States", 1),
    URUGUAY("UY", "Uruguay", 598),
    UZBEKISTAN("UZ", "Uzbekistan", 998),
    VANUATU("VU", "Vanuatu", 678),
    VATICAN_CITY("VA", "Vatican City", 379),
    VENEZUELA("VE", "Venezuela", 58),
    VIETNAM("VN", "Vietnam", 84),
    YEMEN("YE", "Yemen", 967),
    ZAMBIA("ZM", "Zambia", 260),
    ZIMBABWE("ZW", "Zimbabwe", 263);

    private final String code;
    private final String name;
    private final int phoneCode;

    Country(String code, String name, int phoneCode) {
        this.code = code;
        this.name = name;
        this.phoneCode = phoneCode;
    }

    public static Country fromCode(String code) {
        for (Country country : values()) {
            if (country.getCode().equalsIgnoreCase(code)) {
                return country;
            }
        }
        throw new IllegalArgumentException("Code de pays invalide : " + code);
    }

    public static Country fromPhoneCode(int phoneCode) {
        for (Country country : values()) {
            if (country.getPhoneCode() == phoneCode) {
                return country;
            }
        }
        throw new IllegalArgumentException("Code de téléphone invalide : " + phoneCode);
    }
}
